
mp10 grade report for pan30
================================

Latest handin (graded copy) was - on_time

*Regular Problems:
Grading script score  => [98 / 98]
Late Penalty          => 0
Point adjustments     => 0
Total                 => 98

*Extra Credit:
Grading script score for extra credit => [36 / 39]
Late Penalty for extra credit         => 0
Point adjustments for extra credit    => 0
Total extra credit                    => 36


mp10grader program output
---------------------


[1 / 1] eval_exp (ConstExp (IntConst 2), []) (correct)
[1 / 1] eval_exp (ConstExp (IntConst 42), []) (correct)
[1 / 1] eval_exp (ConstExp (BoolConst true), []) (correct)
[1 / 1] eval_exp (ConstExp (BoolConst false), []) (correct)
[1 / 1] eval_exp (ConstExp (RealConst 2.), []) (correct)
[1 / 1] eval_exp (ConstExp UnitConst, []) (correct)
[1 / 1] eval_exp (ConstExp NilConst, []) (correct)
[1 / 1] eval_exp (ConstExp (StringConst "x"), []) (correct)
[1 / 1] eval_exp (VarExp "x", [("x", IntVal 2)]) (correct)
[2 / 2] eval_exp (VarExp "y", [("y", RealVal 2.4)]) (correct)
[2 / 2] eval_exp (VarExp "z", [("z", StringVal "hello")]) (correct)
[1 / 1] eval_dec (Val ("x", ConstExp (IntConst 4)), []) (correct)
[1 / 1] eval_dec (Val ("", ConstExp (IntConst 4)), []) (correct)
[1 / 1] eval_dec (Val ("z", ConstExp (BoolConst true)), []) (correct)
[1 / 1] eval_dec (Val ("a", ConstExp NilConst), [("b", UnitVal)]) (correct)
[1 / 1] eval_dec (Val ("b", ConstExp NilConst), [("b", IntVal 3)]) (correct)
[1 / 1] eval_dec (Val ("", ConstExp UnitConst), []) (correct)
[1 / 1] eval_dec (parse "fn x => x;", []) (correct)
[1 / 1] eval_dec (parse "fn y => 3;", []) (correct)
[1 / 1] eval_dec (parse "fn z => 3 + z;", []) (correct)
[1 / 1] eval_dec (parse "fn z => fn y => y + z;", []) (correct)
[1 / 1] eval_dec (parse "fn z => fn y => fn x => x * y * z;", []) (correct)
[1 / 1] eval_dec (parse "(fn x => x) 7;", []) (correct)
[1 / 1] eval_dec (parse "(fn x => fn y => x + y) 2 3;", []) (correct)
[1 / 1] eval_dec (parse "(fn x => fn y => x + y) 2;", []) (correct)
[1 / 1] eval_dec (parse "(fn f => fn x => f x) (fn x => x) 3;", []) (correct)
[1 / 1] eval_dec (parse "(fn z => fn y => fn x => x * y * z) 2 3 4;", []) (correct)
[1 / 1] eval_dec (parse "(fn z => fn y => fn x => x * y * z) 2 3;", []) (correct)
[1 / 1] eval_dec (parse "~2;", []) (correct)
[1 / 1] eval_dec (parse "snd (1,2);", []) (correct)
[1 / 1] eval_dec (parse "fst (1,2);", []) (correct)
[1 / 1] eval_dec (parse "hd [1,2];", []) (correct)
[1 / 1] eval_dec (parse "tl [1,2];", []) (correct)
[1 / 1] eval_dec (parse "tl [true];", []) (correct)
[1 / 1] eval_dec (parse "print_string \"\";", []) (correct)
[1 / 1] eval_dec (parse "fst ( snd (1,2), 3);", []) (correct)
[1 / 1] eval_dec (parse "2 + 3;", []) (correct)
[1 / 1] eval_dec (parse "2.0*.3.0;", []) (correct)
[1 / 1] eval_dec (parse "2.0/.3.0;", []) (correct)
[1 / 1] eval_dec (parse "1::[];", []) (correct)
[1 / 1] eval_dec (parse "(1,2);", []) (correct)
[1 / 1] eval_dec (parse "47=47;", []) (correct)
[1 / 1] eval_dec (parse "4>7;", []) (correct)
[1 / 1] eval_dec (parse "\"hello \"^\"world\";", []) (correct)
[1 / 1] eval_dec (parse "if true then 1 else 0;", []) (correct)
[1 / 1] eval_dec (parse "if false then false else true;", []) (correct)
[1 / 1] eval_dec (parse "if 3 < 4 then 3 else 4;", []) (correct)
[1 / 1] eval_dec (parse "if true then if true then false else true else false;", []) (correct)
[1 / 1] eval_dec (parse "if if true then false else true then 3 else 4;", []) (correct)
[1 / 1] eval_dec (parse "let val y = 5 in y end;", []) (correct)
[1 / 1] eval_dec (parse "let val z = 12 in z + z end;", []) (correct)
[2 / 2] eval_dec (parse "let val x = 8 in let val x = x + 2 in x end end;", []) (correct)
[2 / 2] eval_dec (parse "let val x = let val y = 2 in y + 2 end in x end;", []) (correct)
[1 / 1] eval_dec (parse "val x = 4 val y = \"hi\";", []) (correct)
[1 / 1] eval_dec (parse "val x = 5 val x = \"hi\";", []) (correct)
[1 / 1] eval_dec (parse "val x = 20 val y = x;", []) (correct)
[1 / 1] eval_dec (parse "val x = 3 val y = \"hi\" val z = true;", []) (correct)
[1 / 1] eval_dec (parse "val x = 2 val y = let val x = \"hi\" in x end;", []) (correct)
[1 / 1] eval_dec (parse "val x = 1 val y = \"hi\" val x = true;", []) (correct)
[1 / 1] eval_dec (parse "local val x = 3 in val y = (x, 3.14) end;", []) (correct)
[1 / 1] eval_dec (parse "local val x = 3 in val x = x = x end;", []) (correct)
[1 / 1] eval_dec (parse "local val x = \"hello\" in val y = x ^ \" world\" end;", []) (correct)
[2 / 2] eval_dec (parse "local val x = 3 val y = 3 in val y = x + y end;", []) (correct)
[2 / 2] eval_dec (parse "val rec f x = x;", []) (correct)
[2 / 2] eval_dec (parse "val rec f y = x;", []) (correct)
[2 / 2] eval_dec (parse "val rec e1 x = x val rec e2 x = x;", []) (correct)
[4 / 4] eval_dec (parse "val rec f x = if x = 0 then 1 else x * f (x - 1);", []) (correct)
[4 / 4] eval_dec (parse "val rec f x = if x < 2 then x else (f (x - 1)) + (f (x - 2));", []) (correct)
[4 / 4] eval_dec (parse "val rec e o = fn n => if n = 0 then true else o (n - 1) val rec o n = if n = 0 then false else (e o) (n - 1);", []) (correct)
[1 / 1] eval_dec (parse "val rec f x = x val r = f 5;", []) (correct)
[3 / 3] eval_dec (parse "val rec f x = if x = 0 then 1 else x * f (x - 1) val r = f 5;", []) (correct)
[3 / 3] eval_dec (parse "val rec f x = if x < 2 then x else (f (x - 1)) + (f (x - 2)) val r = f 6;", []) (correct)
[5 / 5] eval_dec (parse "val rec e o = fn n => if n = 0 then true else o (n - 1) val rec o n = if n = 0 then false else (e o) (n - 1) val x = (e o 3, e o 4);", []) (correct)

[1 / 1] eval_dec (parse "val _ = if (raise 2) then 3 else 4;", []) (correct)
[1 / 1] eval_dec (parse "val _ = if (raise (1 + 5)) then 3 else 4;", []) (correct)
[1 / 1] eval_dec (parse "val _ = if true then raise 2 else raise 3;", []) (correct)
[1 / 1] eval_dec (parse "val _ = if false then raise 2 else raise 3;", []) (correct)
[1 / 1] eval_dec (parse "val _ = ((fn x => raise(x + 1)) 3);", []) (correct)
[1 / 1] eval_dec (parse "val _ = (raise 4) 17.0;", []) (correct)
[1 / 1] eval_dec (parse "val _ = ((fn x => x + 1) (raise 3));", []) (correct)
[1 / 1] eval_dec (parse "val _ = hd (raise 2);", []) (correct)
[1 / 1] eval_dec (parse "val _ = ~ (raise (3 - 2));", []) (correct)
[1 / 1] eval_dec (parse "val _ = (raise 3) ^ \"hi\";", []) (correct)
[1 / 1] eval_dec (parse "val _ = 5.9 *. (raise 3);", []) (correct)
[1 / 1] eval_dec (parse "let val f = fn x => raise 4 in f 17.0 15 end;", []) (correct)
[1 / 1] eval_dec (parse "let val x = 13 in (raise (x + 2)) end;", []) (correct)
[1 / 1] eval_dec (parse "let val x = (raise 2) in x end;", []) (correct)
[0 / 1] eval_dec (parse "val rec f x = fn n => if x = 0 then raise n else (f (x - 1) (n * x)) val _ = (f 5) 1;", []) (student solution returns an incorrect value)
[1 / 1] eval_dec (parse "val x = raise 0;", []) (correct)
[1 / 1] eval_dec (parse "val x = raise 3 val y = 4;", []) (correct)
[0 / 1] eval_dec (parse "val x = () val z = raise (3 * 4);", []) (student solution returns an incorrect value)
[1 / 1] eval_dec (parse "local val x = (raise 4) in val y = 4 + 5 end;", []) (correct)
[1 / 1] eval_dec (parse "local val x = 2 in val y = (raise x) end;", []) (correct)
[1 / 1] eval_dec (parse "raise 1;", []) (correct)
[1 / 1] eval_dec (parse "raise 2;", []) (correct)
[1 / 1] eval_dec (parse "raise (raise 4);", []) (correct)
[1 / 1] eval_dec (parse "raise((raise 3) (raise 4));", []) (correct)
[1 / 1] eval_dec (parse "raise (3 + 4);", []) (correct)
[1 / 1] eval_dec (parse "4/0;", []) (correct)
[0 / 1] eval_dec (parse "4.0 /. 0.0;", []) (student solution returns an incorrect value)
[1 / 1] eval_dec (parse "hd [];", []) (correct)
[1 / 1] eval_dec (parse "tl [];", []) (correct)
[1 / 1] eval_dec (parse "4 handle 2 => 9999 | 3 => 9998;", []) (correct)
[1 / 1] eval_dec (parse "(raise 3) handle 2 => 5 | 0 => 2;", []) (correct)
[1 / 1] eval_dec (parse "4 / 0 handle 0 => 9999;", []) (correct)
[1 / 1] eval_dec (parse "4 / 0 handle _ => 9999;", []) (correct)
[1 / 1] eval_dec (parse "(raise 2) handle 0 => 5 | 2 => 9999 | 3 => 27;", []) (correct)
[1 / 1] eval_dec (parse "(raise 2) handle 0 => 5 | _ => 9999 | 3 => 27;", []) (correct)
[2 / 2] eval_dec (parse "raise (raise 2) handle 3 => 8888 | 2 => 9999;", []) (correct)
[2 / 2] eval_dec (parse "if (raise 2) then false else true handle 2 => 9999 | _ => 22;", []) (correct)
Total: [98 / 98]
Extra: [36 / 39]

Additional outout from compiling students code (may be empty)
----------------------------------------------------



Student's code (with comments and point adjustments)
----------------------------------------------------


open Mp10common;;

(* Team with: Yifang Zhang - zhang303 *)
(* get help from furquans *)

let const_to_val c = 
	match c with 
		| BoolConst b -> BoolVal b
		| IntConst i -> IntVal i
		| RealConst r -> RealVal r
		| StringConst s -> StringVal s
		| NilConst -> ListVal []
		| UnitConst -> UnitVal

let monOpApply unop v = 
	match (unop,v) with
		| (IntNegOp, IntVal i) -> IntVal(-i)
		| (HdOp, ListVal lst) -> 
			(
				match lst with 
					| [] -> Exn(0)
					| x::xs -> x
			)
		| (TlOp, ListVal lst) ->
      		(
				match lst with 
					| [] -> Exn(0)
					| x::xs -> ListVal(xs) 
			)
		| (FstOp, PairVal(v1,v2)) -> v1
		| (SndOp, PairVal(v1,v2)) -> v2
		| (PrintStringOp, StringVal s) -> print_string s; UnitVal

let binOpApply binop v1 v2 =
	match (binop,v1,v2) with
		| (IntPlusOp, IntVal i1, IntVal i2) -> IntVal(i1+i2)
		| (IntMinusOp, IntVal i1, IntVal i2) -> IntVal(i1-i2)
		| (IntTimesOp, IntVal i1, IntVal i2) -> IntVal(i1*i2)
		| (IntDivOp, IntVal i1, IntVal i2) -> if i2 != 0 then IntVal(i1/i2) else Exn(0)
		| (RealPlusOp, RealVal r1, RealVal r2) -> RealVal(r1+.r2)
		| (RealMinusOp, RealVal r1, RealVal r2) -> RealVal(r1-.r2)
		| (RealTimesOp, RealVal r1, RealVal r2) -> RealVal(r1*.r2)
		| (RealDivOp, RealVal r1, RealVal r2) -> if r2 != 0.0 then RealVal(r1/.r2) else Exn(0)
		| (ConcatOp, StringVal s1, StringVal s2) -> StringVal (s1^s2)
		| (ConsOp, a, ListVal bs) -> ListVal(a::bs)
		| (CommaOp, v1, v2) -> PairVal(v1,v2)
		| (EqOp, v1, v2) -> BoolVal(v1 = v2)
		| (GreaterOp, v1, v2) -> BoolVal(v1>v2)


let rec get_value_list key l =
	match l with
		|  [] -> None
		| ((Some value,e)::bs) -> if value = key then Some e else get_value_list key bs
		| ((None,e)::bs) -> Some e

let rec eval_exp (exp, m) = 
	match exp with
		| ConstExp c -> const_to_val c
		| FnExp(x,e) -> ClosureVal(x,e,m)
		| VarExp e -> 
			(
				match lookup_env m e with 
					| Some RecVarVal(f, x, e', m') -> ClosureVal (x, e', ins_env m x (RecVarVal(f, x, e', m')))
					| Some v -> v
			)
		| AppExp(e1,e2) ->
			(
				match eval_exp (e1,m) with
					|Exn(i) -> Exn(i)
					| ClosureVal(x,e',m') -> 
						(
							match eval_exp (e2,m) with
								| Exn(i) -> Exn(i)
								| v' -> eval_exp (e',(ins_env m' x v'))
						)
			)
		| MonOpAppExp(unop,e) ->
			(
				match eval_exp (e,m) with
					| Exn(i) -> Exn(i)
					| v -> monOpApply unop v
			)
		| BinOpAppExp(binop,e1,e2) -> 
			(
				match eval_exp (e1,m) with
					| Exn(i) -> Exn(i)
					| v1 -> 
						(
							match eval_exp (e2,m) with
								| Exn(j) -> Exn(j)
								| v2 -> binOpApply binop v1 v2
						)
			)
		| IfExp(e1,e2,e3) ->
			(
				match eval_exp (e1,m) with
					| BoolVal(true) -> eval_exp (e2,m)
					| BoolVal(false) -> eval_exp (e3,m)
					| Exn(i) -> Exn(i)
			)
		| LetExp(d,e) ->
			(
				match eval_dec (d,m) with
	  				| ((None,Exn(i))::tl,m') -> Exn(i)
					| (b,m') -> eval_exp (e,(sum_env m' m))
			)
		| RaiseExp(e) ->
			(
				match eval_exp (e,m) with
					|Exn(i) -> Exn(i)
					| IntVal(v) -> Exn(v)
			)
		| HandleExp(e,int_opt,e0,lst) ->
			(
				match eval_exp (e,m) with
					| Exn(j) -> 
						(
							match get_value_list j ((int_opt,e0)::lst) with
								| None -> Exn(j)
								| Some ei -> eval_exp (ei,m)
						)
					| v -> v
			)

and eval_dec (dec, m) = 
	match dec with
		| Val(x,e) -> 
			(
				match eval_exp (e,m) with
					| Exn(i) -> ([(None,Exn(i))],empty_env)
					| v -> 
						if x = "" then ([(None,v)],empty_env)
						else ([(Some x,v)],(make_env x v))
			)
		| Seq(d1,d2) -> 
			(
				match eval_dec (d1,m) with
					| ((None,Exn(i))::tl,m') -> ((None,Exn(i))::tl,m')
					| (b1,m') ->
						(
							match eval_dec (d2, (sum_env m' m)) with
								| ((None,Exn(i))::tl,m') -> ((None,Exn(i))::tl,m')
								| (b2,m'') -> (b2@b1, sum_env m'' m')
						)
			)
		| Local(d1,d2) -> 
			(
				match eval_dec (d1,m) with
					| ((None,Exn(i))::tl,m') -> ((None,Exn(i))::tl,empty_env)
					| (b1,m') -> eval_dec (d2, (sum_env m' m))
			)
		| Rec(f,x,e) -> ([(Some f, RecVarVal(f,x,e,m))], (make_env f (RecVarVal(f,x,e,m))))


Stdout
----------------------------------------------------


