
mp3 grade report for pan30
================================

Latest handin (graded copy) was - on_time

*Regular Problems:
Grading script score  => [49 / 49]
Late Penalty          => 0
Point adjustments     => -1
Total                 => 48

*Extra Credit:
Grading script score for extra credit => [5 / 5]
Late Penalty for extra credit         => 0
Point adjustments for extra credit    => 0
Total extra credit                    => 5


mp3grader program output
---------------------


[1 / 1] even_count [-2] (correct)
[1 / 1] even_count [-2;-1;0;2] (correct)
[1 / 1] even_count [-1;-3;-5] (correct)
[0 / 0] even_count [] (correct)
[1 / 1] split_sum [-2;0;-1;3] (fun x -> (x mod 2 = 1)) (correct)
[1 / 1] split_sum [4;2;1] (fun x -> false) (correct)
[1 / 1] split_sum [2;5;5;6] (fun x -> (x < 4)) (correct)
[0 / 0] split_sum [] (fun x -> (x = 1)) (correct)
[1 / 1] merge [1;3;5;6;7] [2;4] (correct)
[1 / 1] merge ['a';'b';'c'] ['a';'b';'c'] (correct)
[1 / 1] merge [] [0.1;0.4;0.8] (correct)
[0 / 0] merge [()] [()] (correct)
[1 / 1] range_count [1;2;3] 1 2 (correct)
[1 / 1] range_count ['m';'a';'b';'c';'h';'z'] 'd' 'g' (correct)
[1 / 1] range_count [1] -2 2 (correct)
[1 / 1] range_count [-2.5;-5.0] -4.0 -3.0 (correct)
[1 / 1] max_index [1;2;3;4] (correct)
[1 / 1] max_index [-1;-5;-3;-1;-4] (correct)
[1 / 1] max_index ["asd";"zxc";"rty";"zxc";"zxc"] (correct)
[1 / 1] max_index [-5.0] (correct)
[1 / 1] max_index [();();();()] (correct)
[1 / 1] unique_to_neighbor [1;2;2;3;2] (correct)
[1 / 1] unique_to_neighbor ["asdf";"asd";"asdf";"asd";"asdf"] (correct)
[1 / 1] unique_to_neighbor [3;2;3;3;3] (correct)
[1 / 1] unique_to_neighbor [1;2;3;4;5;1] (correct)
[1 / 1] unique_to_neighbor [();();();()] (correct)
[1 / 1] split_sum_sol [1;2;3] (fun x -> (x mod 2 = 1)) (correct)
[1 / 1] split_sum_sol [4;2;1] (fun x -> true) (correct)
[1 / 1] split_sum_sol [2;5;5;6] (fun x -> (x<6)) (correct)
[1 / 1] split_sum_sol [-2;0;1;3] (fun x -> (x mod 3 = 1)) (correct)
[1 / 1] split_sum_sol [] (fun x -> (x = 1)) (correct)
[1 / 1] remove_if_sol [1;2;3] (fun x -> (x=3)) (correct)
[1 / 1] remove_if_sol [-5;-2;-3;-4] (fun x -> (x+3<0)) (correct)
[1 / 1] remove_if_sol [1;2;2;3] (fun x -> x=2) (correct)
[1 / 1] remove_if_sol [()] (fun x -> x=()) (correct)
[1 / 1] remove_if_sol [false;false;false] idk (correct)
[1 / 1] remove_if_sol [1;1;1;1] (fun x -> (x=1)) (correct)
[1 / 1] all_positive_sol [125;173;225;273] (correct)
[1 / 1] all_positive_sol [-1] (correct)
[1 / 1] all_positive_sol [] (correct)
[1 / 1] all_positive_sol [2;0;1;3] (correct)
[1 / 1] all_positive_sol [3;2;1;-4;3] (correct)
[1 / 1] range_count_sol [0;1;2;3] 1 3 (correct)
[1 / 1] range_count_sol [2;2;2;2] 1 3 (correct)
[1 / 1] range_count_sol [0.2;0.4;0.6;0.8] 0.3 0.5 (correct)
[1 / 1] range_count_sol [3;2;4;5;1;9] 1 9 (correct)
[1 / 1] range_count_sol ['a';'b';'c'] 'b' 'd' (correct)
[1 / 1] app_all_with [] 0 [] (correct)
[1 / 1] app_all_with [(fun x y -> x+y); (fun x y -> x*y )] 47 [1;2;3] (correct)
[1 / 1] app_all_with [(fun x y -> (x,y) ); (fun x y -> (x*.2.0, y))] 3.14 ["hello"; "there"; "hi"] (correct)
[1 / 1] app_all_with [(fun x y -> x > y); (fun x y -> y mod x = 0); (fun x y -> x < y)] 6 [0;6;10;12;20;24] (correct)
[1 / 1] app_all_with [(fun x y -> (x+y)>(x*y))] 6 [0;6;1;2;5;9] (correct)

[1 / 1] rle [1;2;2;3;3;3] (correct)
[1 / 1] rle [124] (correct)
[1 / 1] rle ["hi";"hi";"hi";"hi";"everyone"] (correct)
[1 / 1] rle [1;3;5;1] (correct)
[1 / 1] rle [4.0;0.0;0.0] (correct)
Total: [49 / 49]
Extra: [5 / 5]

Additional outout from compiling students code (may be empty)
----------------------------------------------------



Student's code (with comments and point adjustments)
----------------------------------------------------


open Mp3common
open List

(* Problem 1 *)
let rec even_count l =
	match l with [] -> 0 
		| (a::bs) -> 
		(let n = even_count bs in
				if(a mod 2 = 0) then (n+1)
				 else n
		)

(*** If statement evaluated before recursive call ***) (*** -1 Point ***)

(* Problem 2 *)
let rec split_sum l f = 
	match l with [] -> (0,0)
		| (a::bs) ->
		(let m,n = split_sum bs f in
			if(f a = true) then (a + m, n)
			else (m, n + a)
		)

(* Problem 3 *)
let rec merge l1 l2 = 
	match l1 with [] -> l2
		| (a::bs) -> 
			(match l2 with [] -> l1
				| (c::ds) -> 
					(
						let l3 = (merge bs ds) in
							(a::c::l3)
					)
			)

(* Problem 4 *)
let rec range_count l m n = 
	let rec range_count_helper l m n count = 
		match l with [] -> count
			| (a::bs) ->
				if (a > m)&&(a < n) then (range_count_helper bs m n (count+1))
				else (range_count_helper bs m n count)
	in range_count_helper l m n 0

(* Problem 5 *)
let rec max_index l = 
	let rec max_index_helper l max result count =
		match l with [] -> result
			|(a::bs) ->
				if(a > max) then max_index_helper bs a [count] (count+1)
				else if (a = max) then max_index_helper bs a (count::result) (count+1)
				else max_index_helper bs max result (count+1)
	in match l with [] -> []
		| (a::bs) -> max_index_helper l a [] 0 

(* Problem 6 *)
let rec reverse l result = 
	match l with [] -> result
		| (a::bs) -> reverse bs (a::result)

let rec unique_to_neighbor l = 
	let rec unique_to_neighbor_helper l result = 
		match l with [] -> result
			| [a] -> a::result
			| (a::b::cs) -> 
				if (a = b) then unique_to_neighbor_helper (b::cs) result
				else unique_to_neighbor_helper (b::cs) (a::result)
	in reverse (unique_to_neighbor_helper l []) []
		

(* Problem 7 *)
let remove_if_base = [] (* You may need to change this *)
let remove_if_rec p x r = 
	if (p x = false) then x::r
	else r

(* Problem 8 *)
let split_sum_base = (0,0) (* You may need to change this *)
let split_sum_rec f x r = 
	let n, m = r in 
		( if (f x = true) then (n + x), m
			else n, (m + x)
		)

(* Problem 9 *)
let all_positive_base = (true) (* You may need to change this *)
let all_positive_rec r x = 
	if (x > 0) then (true && r)
	else false

(* Problem 10 *)
let range_count_base = 0 (* You may need to change this *)
let range_count_rec m n r x = 
	if ((m < x) && (n > x)) then (r+1)
	else r

(* Problem 11 *)
let app_all_with fs b l  = 
	List.map (fun f -> List.map (fun g -> f b g) l) fs
(* got help from Chizheng Wang *)

(* Problem 12 *)
let reverse_ l = 
	List.fold_left (fun f x -> (x::f)) [] l;;

let rle l = 
	match l with [] -> []
		| (a::bs) -> rev 
			( List.fold_left 
				(fun g x ->
					match g with
						| ((c,d)::es) -> 
							if (x = c) then ((c,(d+1))::es)
							else ((x,1)::g)
				) 
				[(a,1)] bs
			)
	

Stdout
----------------------------------------------------


